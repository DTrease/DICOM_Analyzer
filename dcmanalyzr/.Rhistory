item  #if the target is empty, it's just the item
} else {
x <- local({
tmp <- sapply(target, weight)
split(seq(target), tmp > weight(item))
})
c(target[x[["FALSE"]]], list(item), target[x[["TRUE"]]])
}
}
if (length(trees) < 2)
trees
else {
## Combine the first two
combined <- makeCodeTree(trees[[1]], trees[[2]])
insert(combined, trees[-(1:2)])
}
}
##
## Create a single codeTree from a list of codeTrees
## Typically arguments is a list of Leaf nodes
## Hint: reduce to a singleton using combine
##
createCodeTree <- function(trees) {
for (i in trees)
trees<-combine(trees)
trees
}
codeTree <- createCodeTree(helloLeafList)
encoded.HW <- encode(codeTree,helloWorld)
decoded.HW <- decode(encoded.HW,codeTree)
cat(unlist(decoded.HW))
testMessage <- scan(
textConnection(
"0 0 0 1 0 1 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1
0 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1
0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 1 1 0 1 1 0
0 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0
1 1 0 0 1 1 0 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0
0 1 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0
1 0 1 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 1 0
0 0 1 1 0 1 0 1 0 1 0 1 0 1 1 0 0 1 1 0 1 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0
1 0 1 1 1 0 0 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1 1 1 0 0 0 0 0
1 1 0 1 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1
1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 0 0 1
1 1 0 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 1 0 1 0 1 0 1 0 1 0 1 1 0 0
1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 1 1 0 1 0 1 1
1 1 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 1 1 1
0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 0 1 1
1 0 1 1 0 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 1
1 1 1 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 1 0 1 0 0 0 1
1 1 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0
0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1
0 1 1 1 0 1 0 0 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1
1 0 0 1 1 1 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 1 1 1 1 0 0 1 1
1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 0 1 0 0 1 0 0 0 1 1 1 0 1 1 1 0 0 0 0 0 1
1 1 0 0 0 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 1 0
1 1 1 1 1 0 0 0 0 1 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0
0 0 1 1 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0
1 1 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 1 1 0 1 1 1 0 0
1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 1
0 1 0 0 1 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 1 0 0 0"),
what=integer(0))
testMessageFreq <- scan(
textConnection(
" 1  1  1  1  1  2  2  2  2  2  2  3  3  3  4  4  4  4  5  5  6  8  9 10 13 13
14 14 15 18 22 41"),
what = integer(0))
names(testMessageFreq) <- c("A", "E", "v", "w", "y", "-", ",", "b", "h", "I",
"P", "\n", ".", "1", "0", "c", "d", "p", "f", "g",
"l", "m", "u", "i", "e", "s", "o", "r", "n", "t",
"a", " ")
testM.leafList <- LeafListGen(testMessageFreq)
#testM.codeTree <-
encoded.msg <- encode(codeTree,helloWorld)
decoded.msg <- decode(encoded.msg,codeTree)
cat(unlist(decoded.msg))
testMessage <- scan(
textConnection(
"0 0 0 1 0 1 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1
0 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1
0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 1 1 0 1 1 0
0 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0
1 1 0 0 1 1 0 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0
0 1 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0
1 0 1 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 1 0
0 0 1 1 0 1 0 1 0 1 0 1 0 1 1 0 0 1 1 0 1 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0
1 0 1 1 1 0 0 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1 1 1 0 0 0 0 0
1 1 0 1 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1
1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 0 0 1
1 1 0 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 1 0 1 0 1 0 1 0 1 0 1 1 0 0
1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 1 1 0 1 0 1 1
1 1 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 1 1 1
0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 0 1 1
1 0 1 1 0 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 1
1 1 1 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 1 0 1 0 0 0 1
1 1 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0
0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1
0 1 1 1 0 1 0 0 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1
1 0 0 1 1 1 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 1 1 1 1 0 0 1 1
1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 0 1 0 0 1 0 0 0 1 1 1 0 1 1 1 0 0 0 0 0 1
1 1 0 0 0 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 1 0
1 1 1 1 1 0 0 0 0 1 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0
0 0 1 1 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0
1 1 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 1 1 0 1 1 1 0 0
1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 1
0 1 0 0 1 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 1 0 0 0"),
what=integer(0))
testMessageFreq <- scan(
textConnection(
" 1  1  1  1  1  2  2  2  2  2  2  3  3  3  4  4  4  4  5  5  6  8  9 10 13 13
14 14 15 18 22 41"),
what = integer(0))
names(testMessageFreq) <- c("A", "E", "v", "w", "y", "-", ",", "b", "h", "I",
"P", "\n", ".", "1", "0", "c", "d", "p", "f", "g",
"l", "m", "u", "i", "e", "s", "o", "r", "n", "t",
"a", " ")
testM.leafList <- LeafListGen(testMessageFreq)
testM.codeTree <- createCodeTree(testM.leafList)
decoded.testmsg <- decode(testMessage,testM.codeTree)
testM.leafList <- LeafListGen(testMessageFreq)
testM.codeTree <- createCodeTree(testM.leafList)
decoded.testmsg <- decode(testMessage,testM.codeTree)
cat(unlist(decoded.testmsg))
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PanPHex))
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
cat(unlist(decoded.PP))
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
identical(PandPHex,decoded.PP)
typeof(PandP)
typeof(PandPHex)
typeof(decoded.PP)
identical(PandPHex,unlist(decoded.PP))
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
identical(PandPHex,unlist(decoded.PP))
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
Print('logical "TRUE" if text is same before/after encode')
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
Print('logical TRUE if text is same before/after encode')
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
Print("logical TRUE if text is same before/after encode")
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
#Size calculation
bits.raw <- 8*length(PandPHex)
bits.cmp <- length(encoded.PP)
print("encoded size is", 100*bits.cmp/bits.raw, "percent of original")
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
#Size calculation
bits.raw <- 8*length(PandPHex)
bits.cmp <- length(encoded.PP)
print("encoded size is", (100 * bits.cmp / bits.raw), "percent of original")
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
#Size calculation
bits.raw <- 8*length(PandPHex)
bits.cmp <- length(encoded.PP)
size.dif <- 100 * bits.cmp / bits.raw
print("encoded size is", size.dif, "percent of original")
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
#Size calculation
bits.raw <- 8*length(PandPHex)
bits.cmp <- length(encoded.PP)
size.dif <- 100 * bits.cmp / bits.raw
print("encoded size is", str(size.dif), "percent of original")
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
#Size calculation
bits.raw <- 8*length(PandPHex)
bits.cmp <- length(encoded.PP)
size.dif <- 100 * bits.cmp / bits.raw
print(str(size.dif))
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
#Size calculation
bits.raw <- 8*length(PandPHex)
bits.cmp <- length(encoded.PP)
size.dif <- 100 * bits.cmp / bits.raw
PandP <- readBin(con="PandP.txt", what=raw(0), n=10^6)
PandPHex <- as.character(PandP)
#proceed as for helloWorld
PPFreq <- sort(table(PandPHex))
PP.leafList <- LeafListGen(PPFreq)
PP.codeTree <- createCodeTree(PP.leafList)
encoded.PP <- encode(PP.codeTree,PandPHex)
decoded.PP <- decode(encoded.PP,PP.codeTree)
print("logical TRUE if text is same before/after encode")
identical(PandPHex,unlist(decoded.PP))
#Size calculation
bits.raw <- 8*length(PandPHex)
bits.cmp <- length(encoded.PP)
size.dif <- 100 * bits.cmp / bits.raw
print(size.dif)
?target
vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
LeafListGen <- function(freqlist) lapply(seq(freqlist), vect.makeLeaf)
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
LeafListGen <- function(freqlist) lapply(seq(freqlist), vect.makeLeaf(names(helloFreq),helloFreq))
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
seq(freqlist
seq(freqlist)
seq(helloFreq)
vect.makeLeaf <- Vectorize([makeLeaf])
vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
#Need to make a function that can be fed to lapply in order to get correct list levels
elementwise.makeLeaf <- function(index) makeleaf(freqlist[index],names(freqlist[index]))
LeafListGen <- function(freqlist) lapply(seq(freqlist), elementwise.makeLeaf)
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
##
## Make a leaf node (also a codeTree) with given symbol and given weight
## Just a list representation.
makeLeaf <- function(symbol, weight)
list(list(symbol=symbol, weight=weight))
## Leaves have no left or right sub-trees
is.leaf <- function(object) is.null(object[[1]]$left) && is.null(object[[1]]$right)
## Accessors for getting at symbol and weight
symbol <- function(object) object[[1]]$symbol
weight <- function(object) object[[1]]$weight
##
## Construct a codeTree with given left and right code trees
##
makeCodeTree <- function(left, right)
list(list(left=left,
right=right,
symbol=c(symbol(left), symbol(right)),
weight=weight(left) + weight(right)))
## Left and right branch accessors
leftBranch <- function(tree) tree[[1]]$left
rightBranch <- function(tree) tree[[1]]$right
##
## Traverse the tree per bit
##
chooseBranch <- function(bit, branch) {
if (bit == 0)
leftBranch(branch)
else if (bit == 1)
rightBranch(branch)
else
stop(paste("bad bit in chooseBranch", bit))
}
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
helloFreq <- sort(table(helloWorld))
vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
#Need to make a function that can be fed to lapply in order to get correct list levels
elementwise.makeLeaf <- function(index) makeleaf(freqlist[index],names(freqlist[index]))
LeafListGen <- function(freqlist) lapply(seq(freqlist), elementwise.makeLeaf)
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
#Need to make a function that can be fed to lapply in order to get correct list levels
elementwise.makeLeaf <- function(index) makeLeaf(freqlist[index],names(freqlist[index]))
LeafListGen <- function(freqlist) lapply(seq(freqlist), elementwise.makeLeaf)
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
#Need to make a function that can be fed to lapply in order to get correct list levels
LeafListGen <- function(freqlist) {
elementwise.makeLeaf <- function(index) makeLeaf(freqlist[index],names(freqlist[index]))
leaflist <- lapply(seq(freqlist), elementwise.makeLeaf)
return(leaflist)
}
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
#helloLeafList <- lapply(seq(helloFreq), function(i) makeLeaf(weight=helloFreq[i], symbol=names(helloFreq[i])))
#vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
#Need to make a function that can be fed to lapply in order to get correct list levels
LeafListGen <- function(freqlist) {
elementwise.makeLeaf <- function(index) makeLeaf(freqlist[index],names(freqlist[index]))
leaflist <- lapply(seq(freqlist), elementwise.makeLeaf)
return(leaflist)
}
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
#helloLeafList <- lapply(seq(helloFreq), function(i) makeLeaf(weight=helloFreq[i], symbol=names(helloFreq[i])))
#vect.makeLeaf <- Vectorize(makeLeaf)
#helloLeafList <- vect.makeLeaf(names(helloFreq),helloFreq)
#Need to make a function that can be fed to lapply in order to get correct list levels
LeafListGen <- function(freqlist) {
elementwise.makeLeaf <- function(index) makeLeaf(weight=freqlist[index],symbol=names(freqlist[index]))
leaflist <- lapply(seq(freqlist), elementwise.makeLeaf)
return(leaflist)
}
#LeafListGen <- function(freqlist) lapply(seq(freqlist), function(i) makeLeaf(weight=freqlist[i], symbol=names(freqlist[i])))
helloLeafList <- LeafListGen(helloFreq)
#helloLeafList <- lapply(seq(helloFreq), function(i) makeLeaf(weight=helloFreq[i], symbol=names(helloFreq[i])))
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
setwd("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_select()
directory = "."
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
setwd("~/")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
setwd("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
setwd("~/")
dcm_select("//Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_select("//Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata/")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata/")
setwd("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
setwd("~/")
dcm_select("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata/")
dcm_select("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
files <- list.files(path = "~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata", pattern=".dcm")
for (file in as.list(files)) {
print(file)}
directory < "."
directory <- "."
for (file in as.list(files)) {
print(file.path(directory,file))}
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
setwd("~/")
dcm_select("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata/")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
source('~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/R/dcm_select.R', echo=TRUE)
dcm_select()
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
package(R.utils)
install.packages("R.utils")
library(R.utils)
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
source('~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/R/dcm_select.R', echo=TRUE)
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
setwd("~/")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
document()
library(roxygen2)
document()
library(devtools)
document()
install.packages("devtools")
library(devtools)
library(roxygen2)
document()
setwd("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr")
document()
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
setwd("~/")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
setwd("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr")
document()
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
setwd("~/")
dcm_select("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_metadata("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_allview("/Users/davidtrease/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr/inst/extdata")
dcm_select(system.file('extdata', package = 'dcmanalyzr'))
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
install(dcmanalyzr)
library(dcmanalyzr)
vignette(package="dcmanalyzr")
v1 <- vignette("dcmanalyzr")
print(v1)
v1 <- vignette(package="dcmanalyzr")
print(v1)
dcm_allview(dcm_select(system.file('extdata', package = 'dcmanalyzr'))
)
vignette("Report", package = "your_package_name")
vignette("Report", package = "dcmanalyzer")
vignette("Report", package = "dcmanalyzr")
vignette("report", package = "dcmanalyzr")
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
vignette("Report", package = "dcmanalyzr")
sample_metadata <- dcm_metadata(system.file('extdata', package = 'dcmanalyzr'))
dcm_allview(system.file('extdata', package = 'dcmanalyzr'))
classified_data <- dcm_select(system.file('extdata', package = 'dcmanalyzr'))
dcm_metadata(devtools::system.file('extdata', package = 'dcmanalyzr'))
classified_data <- dcm_select(system.file('extdata', package = 'dcmanalyzr'))
classified_data <- dcm_select(system.file('extdata', package = 'dcmanalyzr'))
library(roxygen2)
document()
setwd("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr")
document()
library(devtools)
document()
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
vignette("Report", package = "dcmanalyzr")
install.packages("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr_1.0.tar.gz", repos = NULL, type = "source")
library(dcmanalyzr)
vignette("Report", package = "dcmanalyzr")
vignette("Report", package = "dcmanalyzr")
setwd("~/Documents/Stanford/STATS290/Github/dtrease/dcmanalyzr")
document()
